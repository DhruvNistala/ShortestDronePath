'''
This file plots the optimal path traversing a sequence of points
calculated using Dubins Path and Dijkstra's Algorithm, provided an input file,
generated by the accompanying Java code.
'''

import urllib
from random import random
import math
from math import pi
import numpy as np
import matplotlib.pyplot as plt
import turtle
# import matplotlib.patches as patches
import itertools

ExitTg0 = []
EntryTg0 = []
ExitTg1 = []
EntryTg1 = []
ExitTg2 = []
EntryTg2 = []
ExitTg3 = []
EntryTg3 = []


# ------------------------------------------
def draw_arrow(x,y,angle,length):
  cartesianAngleRadians = math.radians(angle)
  #cartesianAngleRadians = (450-angle)*math.pi/180.0
  terminus_y = round(length * math.sin(cartesianAngleRadians),3)
  terminus_x = round(length * math.cos(cartesianAngleRadians),3)
  print("x terminus: ", terminus_x)
  print("y terminus: ", terminus_y)
  print("x: ", x)
  print("y: ", y)

  #style = "Simple, tail_width=0.5, head_width=4, head_length=8"
  #kw    = dict(arrowstyle=style, color="k")
  #plt.arrow(x,y, terminus_x,terminus_y,head_width=0.2,head_length = 0.1,linewidth=1,fc='k',ec='k',color='r')
  plt.quiver(x,y, terminus_x,terminus_y,angles='xy', scale_units='xy',scale=1)
  #print [angle, cartesianAngleRadians, x, y, terminus_x, terminus_y]


# ------------------------------------------
Radius = 1

# -----------------------------------------
# GRID
# -----------------------------------------
fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(1, 1, 1)

x_min = -5.0
x_max = 12.0

y_min = -5.0
y_max = 12.0

plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)

grid_x_ticks = np.arange(x_min, x_max, 0.2)
grid_y_ticks = np.arange(y_min, y_max, 0.2)

ax.set_xticks(grid_x_ticks, minor=True)
ax.set_yticks(grid_y_ticks, minor=True)

ax.grid(which='both')
ax.grid(which='minor', alpha=0.2, linestyle='--')

plt.title('Optimal Dubins paths: ALL POINTS', fontsize=12)

def plot_circles(Radius, startCircleX, startCircleY, endCircleX, endCircleY):
    # -----------------------------------------
    # Plot Circles
    # -----------------------------------------

    N1Cir1 = plt.Circle((startCircleX, startCircleY), Radius, color='g', fill=False)

    N2Cir1 = plt.Circle((endCircleX, endCircleY), Radius, color='g', fill=False)

    ax.add_artist(N1Cir1)
    ax.add_artist(N2Cir1)

def plot_arrows(Radius, startX, startY, startHeading, endX, endY, endHeading):
    # -----------------------------------------
    # Plot Arrows for Heading with Angle
    # -----------------------------------------
    draw_arrow(startX, startY, startHeading, Radius)
    draw_arrow(endX, endY, endHeading, Radius)


def draw_tangents(startTangentX, endTangentX, startTangentY, endTangentY):
    # -----------------------------------------
    # Draw Tangent segments (4 of them)
    # -----------------------------------------
    x_values = [startTangentX, endTangentX]
    y_values = [startTangentY, endTangentY]

    plt.plot(x_values, y_values)


line_cnt = 0
#change file path to point to inputFinalPath.txt in Java project
with open(r'C:\Users\dhruv\eclipse-workspace\DubinsDijkstrasDronePathCalculation\inputFinalPath.txt') as input:
    for line in input:
        field = [float(n) for n in line.split(" ") if n.strip()]
        print(field)
        Radius = field[0]
        startX = field[1]
        startY = field[2]
        startHeading = field[3]
        startCircleX = field[4]
        startCircleY = field[5]
        startTangentX = field[6]
        startTangentY = field[7]
        endX = field[8]
        endY = field[9]
        endHeading = field[10]
        endCircleX = field[11]
        endCircleY = field[12]
        endTangentX = field[13]
        endTangentY = field[14]

        plot_circles(Radius, startCircleX, startCircleY, endCircleX, endCircleY)
        plot_arrows(Radius, startX, startY, startHeading, endX, endY, endHeading)
        draw_tangents(startTangentX, endTangentX, startTangentY, endTangentY)

        #line_cnt += 1

    print("DONE")

input.close()

plt.show()

