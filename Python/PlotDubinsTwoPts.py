'''
This file demonstrates the Dubins path calculation between two points, using
input files generated by the accompanying Java code.
'''

import urllib
from random import random
import math
from math import pi
import numpy as np
import matplotlib.pyplot as plt
# import matplotlib.patches as patches
import itertools

ExitTg0 = []
EntryTg0 = []
ExitTg1 = []
EntryTg1 = []
ExitTg2 = []
EntryTg2 = []
ExitTg3 = []
EntryTg3 = []


# ------------------------------------------
def draw_arrow(x,y,angle,length):
  cartesianAngleRadians = math.radians(angle)
  #cartesianAngleRadians = (450-angle)*math.pi/180.0
  terminus_y = round(length * math.sin(cartesianAngleRadians),3)
  terminus_x = round(length * math.cos(cartesianAngleRadians),3)
  #style = "Simple, tail_width=0.5, head_width=4, head_length=8"
  #kw    = dict(arrowstyle=style, color="k")
  #plt.arrow(x,y, terminus_x,terminus_y,head_width=0.2,head_length = 0.1,linewidth=1,fc='k',ec='k',color='r')
  plt.quiver(x,y, terminus_x,terminus_y,angles='xy', scale_units='xy',scale=1)
  #print [angle, cartesianAngleRadians, x, y, terminus_x, terminus_y]


# ------------------------------------------

line_cnt = 0
#change file path to point to inputAllDubinsTwoPts in Java project
with open(r'C:\Users\dhruv\eclipse-workspace\DubinsDijkstrasDronePathCalculation\inputAllDubinsTwoPts.txt') as input:
    for line in input:
        field = [float(n) for n in line.split(" ") if n.strip()]
        print(field)
        if (line_cnt == 0):
            # NumIterations, Radius
            NumNodes = field[0]
            Radius = field[1]
        elif (line_cnt == 1):  # xNode1 & yNode1
            xNode1 = field[0]
            yNode1 = field[1]

        elif (line_cnt == 2):  # xNode2 & yNode2
            xNode2 = field[0]
            yNode2 = field[1]

        elif (line_cnt == 3):  # HeadAngle1 & HeadAngle2
            HeadAngle1 = field[0]
            HeadAngle2 = field[1]

        elif (line_cnt == 4):  # Node1 Circle1 (x,y)
            xNode1Cir1 = field[0]
            yNode1Cir1 = field[1]

        elif (line_cnt == 5):  # Node1 Circle2 (x,y)
            xNode1Cir2 = field[0]
            yNode1Cir2 = field[1]

        elif (line_cnt == 6):  # Node2 Circle1 (x,y)
            xNode2Cir1 = field[0]
            yNode2Cir1 = field[1]

        elif (line_cnt == 7):  # Node2 Circle2 (x,y)
            xNode2Cir2 = field[0]
            yNode2Cir2 = field[1]

        elif (line_cnt == 8):  # ExitTangent-Point, EntryTangent-Point
            ExitTg0.append(field[0])  # x
            ExitTg0.append(field[1])  # y
            EntryTg0.append(field[2])  # x
            EntryTg0.append(field[3])  # y

        elif (line_cnt == 9):  # ExitTangent-Point, EntryTangent-Point
            ExitTg1.append(field[0])
            ExitTg1.append(field[1])
            EntryTg1.append(field[2])
            EntryTg1.append(field[3])

        elif (line_cnt == 10):  # ExitTangent-Point, EntryTangent-Point
            ExitTg2.append(field[0])
            ExitTg2.append(field[1])
            EntryTg2.append(field[2])
            EntryTg2.append(field[3])

        elif (line_cnt == 11):  # ExitTangent-Point, EntryTangent-Point
            ExitTg3.append(field[0])
            ExitTg3.append(field[1])
            EntryTg3.append(field[2])
            EntryTg3.append(field[3])

        line_cnt += 1

    print("DONE")

input.close()

# Plot the variables captured from file.


# plt.xlim(-10, 10,)
# plt.ylim(-10, 10)
# plt.grid('on', linestyle='--')


fig = plt.figure(figsize=(6, 6))
ax = fig.add_subplot(1, 1, 1)

# -----------------------------------------
# GRID
# -----------------------------------------
x_min = -5.0
x_max = 7.0

y_min = -5.0
y_max = 7.0

plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)

grid_x_ticks = np.arange(x_min, x_max, 0.2)
grid_y_ticks = np.arange(y_min, y_max, 0.2)

ax.set_xticks(grid_x_ticks, minor=True)
ax.set_yticks(grid_y_ticks, minor=True)

ax.grid(which='both')
ax.grid(which='minor', alpha=0.2, linestyle='--')

plt.title('Dubins path from Location 1 to Location 2:', fontsize=12)

# plt.plot(x,y)

# -----------------------------------------
# Plot Circles
# -----------------------------------------

N1Cir1 = plt.Circle((xNode1Cir1, yNode1Cir1), Radius, color='g', fill=False)
N1Cir2 = plt.Circle((xNode1Cir2, yNode1Cir2), Radius, color='b', fill=False)

N2Cir1 = plt.Circle((xNode2Cir1, yNode2Cir1), Radius, color='g', fill=False)
N2Cir2 = plt.Circle((xNode2Cir2, yNode2Cir2), Radius, color='b', fill=False)

ax.add_artist(N1Cir1)
ax.add_artist(N1Cir2)
ax.add_artist(N2Cir1)
ax.add_artist(N2Cir2)

# -----------------------------------------
# Plot Arrows for Heading with Angle
# -----------------------------------------
draw_arrow(xNode1, yNode1, HeadAngle1, Radius)
draw_arrow(xNode2, yNode2, HeadAngle2, Radius)

x_values = []
x_values = []
# -----------------------------------------
# Draw Tangent segments (4 of them)
# -----------------------------------------
x_values = [ExitTg0[0], EntryTg0[0]]
y_values = [ExitTg0[1], EntryTg0[1]]

plt.plot(x_values, y_values)

x_values = [ExitTg1[0], EntryTg1[0]]
y_values = [ExitTg1[1], EntryTg1[1]]

plt.plot(x_values, y_values)

x_values = [ExitTg2[0], EntryTg2[0]]
y_values = [ExitTg2[1], EntryTg2[1]]

plt.plot(x_values, y_values)

x_values = [ExitTg3[0], EntryTg3[0]]
y_values = [ExitTg3[1], EntryTg3[1]]

plt.plot(x_values, y_values)


plt.show()
